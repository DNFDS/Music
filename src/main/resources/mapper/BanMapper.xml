<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.dao.BanMapper" >
  <resultMap id="BanResultMap" type="com.example.demo.entity.Ban" >
    <id column="USERID" property="userid" jdbcType="VARCHAR" />
    <id column="ADMINID" property="adminid" jdbcType="VARCHAR" />
    <result column="BANTIME" property="bantime" jdbcType="TIMESTAMP" />
    <result column="BANREASON" property="banreason" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    USERID, ADMINID, BANTIME, BANREASON
  </sql>
  <select id="selectByExample" resultMap="BanResultMap" parameterType="com.example.demo.entity.Example.BanExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from BAN
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BanResultMap" parameterType="com.example.demo.entity.BanKey" >
    select 
    <include refid="Base_Column_List" />
    from BAN
    where USERID = #{userid,jdbcType=VARCHAR}
      and ADMINID = #{adminid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.example.demo.entity.BanKey" >
    delete from BAN
    where USERID = #{userid,jdbcType=VARCHAR}
      and ADMINID = #{adminid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.entity.Example.BanExample" >
    delete from BAN
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.entity.Ban" >
    insert into BAN (USERID, ADMINID, BANTIME, 
      BANREASON)
    values (#{userid,jdbcType=VARCHAR}, #{adminid,jdbcType=VARCHAR}, #{bantime,jdbcType=TIMESTAMP}, 
      #{banreason,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.entity.Ban" >
    insert into BAN
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userid != null" >
        USERID,
      </if>
      <if test="adminid != null" >
        ADMINID,
      </if>
      <if test="bantime != null" >
        BANTIME,
      </if>
      <if test="banreason != null" >
        BANREASON,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userid != null" >
        #{userid,jdbcType=VARCHAR},
      </if>
      <if test="adminid != null" >
        #{adminid,jdbcType=VARCHAR},
      </if>
      <if test="bantime != null" >
        #{bantime,jdbcType=TIMESTAMP},
      </if>
      <if test="banreason != null" >
        #{banreason,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.entity.Example.BanExample" resultType="java.lang.Integer" >
    select count(*) from BAN
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update BAN
    <set >
      <if test="record.userid != null" >
        USERID = #{record.userid,jdbcType=VARCHAR},
      </if>
      <if test="record.adminid != null" >
        ADMINID = #{record.adminid,jdbcType=VARCHAR},
      </if>
      <if test="record.bantime != null" >
        BANTIME = #{record.bantime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.banreason != null" >
        BANREASON = #{record.banreason,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update BAN
    set USERID = #{record.userid,jdbcType=VARCHAR},
      ADMINID = #{record.adminid,jdbcType=VARCHAR},
      BANTIME = #{record.bantime,jdbcType=TIMESTAMP},
      BANREASON = #{record.banreason,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.Ban" >
    update BAN
    <set >
      <if test="bantime != null" >
        BANTIME = #{bantime,jdbcType=TIMESTAMP},
      </if>
      <if test="banreason != null" >
        BANREASON = #{banreason,jdbcType=VARCHAR},
      </if>
    </set>
    where USERID = #{userid,jdbcType=VARCHAR}
      and ADMINID = #{adminid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.Ban" >
    update BAN
    set BANTIME = #{bantime,jdbcType=TIMESTAMP},
      BANREASON = #{banreason,jdbcType=VARCHAR}
    where USERID = #{userid,jdbcType=VARCHAR}
      and ADMINID = #{adminid,jdbcType=VARCHAR}
  </update>
  <select id="getBannedUser" parameterType="java.util.HashMap" statementType="CALLABLE">
    call ADMIN_PKG.get_banned_user(#{adminid,mode=IN,jdbcType=VARCHAR},#{bannedusers,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=BanResultMap})
  </select>
  <select id="banUser" statementType="CALLABLE">
    call ADMIN_PKG.ban_user(#{userid,mode=IN,jdbcType=VARCHAR},#{adminid,mode=IN,jdbcType=VARCHAR},#{banreason,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="unbanUser" statementType="CALLABLE">
    call ADMIN_PKG.unban_user(#{userid,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="getBannedInfo" parameterType="java.util.HashMap" statementType="CALLABLE">
    call ADMIN_PKG.get_banned_info(#{userid,mode=IN,jdbcType=VARCHAR},#{baninfo,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=BanResultMap})
  </select>
  <select id="getBannedReason" statementType="CALLABLE">
    call ADMIN_PKG.get_banned_reason(#{userid,mode=IN,jdbcType=VARCHAR},#{banreason,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="getAllBannedUser" parameterType="java.util.HashMap" statementType="CALLABLE">
    call ADMIN_PKG.view_all_banned_user(#{username,mode=IN,jdbcType=VARCHAR},#{banneduser,mode=OUT,jdbcType=VARCHAR,javaType=ResultSet,resultMap=UserResultMap})
  </select>
  <select id="getAllUnbannedUser" parameterType="java.util.HashMap" statementType="CALLABLE">
    call ADMIN_PKG.view_all_unbanned_user(#{username,mode=IN,jdbcType=VARCHAR},#{unbanneduser,mode=OUT,jdbcType=VARCHAR,javaType=ResultSet,resultMap=UserResultMap})
  </select>
</mapper>