<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.SongListMapper">
  <resultMap id="SongListResultMap" type="com.example.demo.entity.SongList">
    <id column="SONGLISTID" jdbcType="VARCHAR" property="songlistid" />
    <result column="SONGLISTNAME" jdbcType="VARCHAR" property="songlistname" />
    <result column="SONGLISTIMAGE" jdbcType="VARCHAR" property="songlistimage" />
    <result column="ISPRIVATE" jdbcType="CHAR" property="isprivate" />
    <result column="USERID" jdbcType="VARCHAR" property="userid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    SONGLISTID, SONGLISTNAME, SONGLISTIMAGE, ISPRIVATE, USERID
  </sql>
  <select id="selectByExample" parameterType="com.example.demo.entity.Example.SongListExample" resultMap="SongListResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from SONGLIST
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="SongListResultMap">
    select 
    <include refid="Base_Column_List" />
    from SONGLIST
    where SONGLISTID = #{songlistid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from SONGLIST
    where SONGLISTID = #{songlistid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.entity.Example.SongListExample">
    delete from SONGLIST
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.entity.SongList">
    insert into SONGLIST (SONGLISTID, SONGLISTNAME, SONGLISTIMAGE, 
      ISPRIVATE, USERID)
    values (#{songlistid,jdbcType=VARCHAR}, #{songlistname,jdbcType=VARCHAR}, #{songlistimage,jdbcType=VARCHAR}, 
      #{isprivate,jdbcType=CHAR}, #{userid,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.entity.SongList">
    insert into SONGLIST
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="songlistid != null">
        SONGLISTID,
      </if>
      <if test="songlistname != null">
        SONGLISTNAME,
      </if>
      <if test="songlistimage != null">
        SONGLISTIMAGE,
      </if>
      <if test="isprivate != null">
        ISPRIVATE,
      </if>
      <if test="userid != null">
        USERID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="songlistid != null">
        #{songlistid,jdbcType=VARCHAR},
      </if>
      <if test="songlistname != null">
        #{songlistname,jdbcType=VARCHAR},
      </if>
      <if test="songlistimage != null">
        #{songlistimage,jdbcType=VARCHAR},
      </if>
      <if test="isprivate != null">
        #{isprivate,jdbcType=CHAR},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.entity.Example.SongListExample" resultType="java.lang.Integer">
    select count(*) from SONGLIST
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update SONGLIST
    <set>
      <if test="record.songlistid != null">
        SONGLISTID = #{record.songlistid,jdbcType=VARCHAR},
      </if>
      <if test="record.songlistname != null">
        SONGLISTNAME = #{record.songlistname,jdbcType=VARCHAR},
      </if>
      <if test="record.songlistimage != null">
        SONGLISTIMAGE = #{record.songlistimage,jdbcType=VARCHAR},
      </if>
      <if test="record.isprivate != null">
        ISPRIVATE = #{record.isprivate,jdbcType=CHAR},
      </if>
      <if test="record.userid != null">
        USERID = #{record.userid,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update SONGLIST
    set SONGLISTID = #{record.songlistid,jdbcType=VARCHAR},
      SONGLISTNAME = #{record.songlistname,jdbcType=VARCHAR},
      SONGLISTIMAGE = #{record.songlistimage,jdbcType=VARCHAR},
      ISPRIVATE = #{record.isprivate,jdbcType=CHAR},
      USERID = #{record.userid,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.SongList">
    update SONGLIST
    <set>
      <if test="songlistname != null">
        SONGLISTNAME = #{songlistname,jdbcType=VARCHAR},
      </if>
      <if test="songlistimage != null">
        SONGLISTIMAGE = #{songlistimage,jdbcType=VARCHAR},
      </if>
      <if test="isprivate != null">
        ISPRIVATE = #{isprivate,jdbcType=CHAR},
      </if>
      <if test="userid != null">
        USERID = #{userid,jdbcType=VARCHAR},
      </if>
    </set>
    where SONGLISTID = #{songlistid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.SongList">
    update SONGLIST
    set SONGLISTNAME = #{songlistname,jdbcType=VARCHAR},
      SONGLISTIMAGE = #{songlistimage,jdbcType=VARCHAR},
      ISPRIVATE = #{isprivate,jdbcType=CHAR},
      USERID = #{userid,jdbcType=VARCHAR}
    where SONGLISTID = #{songlistid,jdbcType=VARCHAR}
  </update>
  
  <select id="getSongListCreatedByUserId" parameterType="java.util.HashMap" statementType="CALLABLE">
    call SONGLIST_PKG.VIEW_SONGLIST_CREATED(#{userid,mode=IN,jdbcType=VARCHAR},#{createdsonglist,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=SongListResultMap})
  </select>
  <select id="getSongListKeepedByUserId" parameterType="java.util.HashMap" statementType="CALLABLE">
    call SONGLIST_PKG.VIEW_SONGLIST_SAVED(#{userid,mode=IN,jdbcType=VARCHAR},#{keepedsonglist,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=SongListResultMap})
  </select>
  <select id="getSongsInSongList" parameterType="java.util.HashMap" statementType="CALLABLE">
    call SONGLIST_PKG.VIEW_SONG_IN_SONGLIST(#{songlistid,mode=IN,jdbcType=VARCHAR},#{songs,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=SongResultMap})
  </select>
  <select id="getSongListById" parameterType="java.util.HashMap" statementType="CALLABLE">
    call SONGLIST_PKG.search_songlist_by_id(#{songlistid,mode=IN,jdbcType=VARCHAR},#{songlist,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=SongListResultMap})
  </select>
  <select id="getSongListSavedNum" statementType="CALLABLE">
    call SONGLIST_PKG.get_songlist_saved_num(#{songlistid,mode=IN,jdbcType=VARCHAR},#{savednum,mode=OUT,jdbcType=INTEGER})
  </select>
  <select id="getSongListByNamePart" parameterType="java.util.HashMap" statementType="CALLABLE">
    call SONGLIST_PKG.search_songlist_by_name_part(#{songname,mode=IN,jdbcType=VARCHAR},#{songlists,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=SongListResultMap})
  </select>
  <select id="getSongListByName" parameterType="java.util.HashMap" statementType="CALLABLE">
    call SONGLIST_PKG.search_songlist_by_name_full(#{songname,mode=IN,jdbcType=VARCHAR},#{songlists,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=SongListResultMap})
  </select>
  <select id="getAllSongList" parameterType="java.util.HashMap" statementType="CALLABLE">
    call SONGLIST_PKG.view_all_songlist(#{songlists,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=SongListResultMap})
  </select>
  <select id="createSongList" parameterType="java.util.HashMap" statementType="CALLABLE">
    call SONGLIST_PKG.ADD_SONGLIST(#{songlistname,mode=IN,jdbcType=VARCHAR},#{songlistimage,mode=IN,jdbcType=VARCHAR},#{isprivate,mode=IN,jdbcType=VARCHAR},#{userid,mode=IN,jdbcType=VARCHAR},#{songlistid,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="addSongToSongList" parameterType="java.util.HashMap" statementType="CALLABLE">
    call SONGLIST_PKG.ADD_SONG_TO_SONGLIST(#{songlistid,mode=IN,jdbcType=VARCHAR},#{songid,mode=IN,jdbcType=VARCHAR},#{isprivate,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="deleteSonglist" statementType="CALLABLE">
    call SONGLIST_PKG.delete_songlist(#{songlistid,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="keepSongList" statementType="CALLABLE">
    call SONGLIST_PKG.add_savesonglist(#{songlistid,mode=IN,jdbcType=VARCHAR},#{userid,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="unKeepSongList" statementType="CALLABLE">
    call SONGLIST_PKG.delete_savesonglist(#{songlistid,mode=IN,jdbcType=VARCHAR},#{userid,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="deleteSongFromSongList" statementType="CALLABLE">
    call SONGLIST_PKG.delete_savesonglist(#{songlistid,mode=IN,jdbcType=VARCHAR},#{songid,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="updateSongListName" statementType="CALLABLE">
    call SONGLIST_PKG.update_songlist_name(#{songlistid,mode=IN,jdbcType=VARCHAR},#{songlistname,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="updateSongListImage" statementType="CALLABLE">
    call SONGLIST_PKG.update_songlist_image(#{songlistid,mode=IN,jdbcType=VARCHAR},#{songlistimage,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
  <select id="updateIsPrivate" statementType="CALLABLE">
    call SONGLIST_PKG.update_songlist_private(#{songlistid,mode=IN,jdbcType=VARCHAR},#{isprivate,mode=IN,jdbcType=VARCHAR},#{succ,mode=OUT,jdbcType=VARCHAR})
  </select>
</mapper>